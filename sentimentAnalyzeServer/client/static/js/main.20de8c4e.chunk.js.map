{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","props","getKeys","Object","keys","this","data","getRowsData","items","console","log","map","key","label","style","color","bind","display","justifyContent","alignItems","className","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","post","then","response","listOfResults","result","keywords","catch","err","sendForEmotionAnalysis","emotion","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.20de8c4e.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nexport default class EmotionTable extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.getRowsData = this.getRowsData.bind(this);\n        this.getKeys = this.getKeys.bind(this);\n        }\n        \n        getKeys = function(){\n            return Object.keys(this.props.data)\n        }\n        \n\n        getRowsData = function(){\n            var items = this.props.data;\n            var keys = this.getKeys();\n            console.log('items:',items);\n            return keys.map((key)=>{\n                // For each Key return emotion and emotion value\n                if(items.label === \"positive\") {\n                    return <tr><td style={{color: \"green\"}}> {key} </td> <td style={{color: \"green\"}} >{items[key]} </td></tr>\n                } else if (items.label === \"negative\"){\n                    return <tr><td style={{color: \"red\"}}> {key} </td> <td style={{color: \"red\"}} >{items[key]} </td></tr>\n                } else if (items.label) {\n                    return <tr><td style={{color: \"orange\"}}> {key} </td> <td style={{color: \"orange\"}} >{items[key]} </td></tr>\n                } else {\n                    return <tr><td style={{color: \"black\"}}> {key} </td> <td style={{color: \"black\"}} >{items[key]} </td></tr>\n                    //{sadness: 0.01551, joy: 0.837086, fear: 0.008408, disgust: 0.009707, anger: 0.013984}\n                }\n\n                \n            })\n        }\n\n    render() {\n            return (  \n            <div style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\"\n                }}>\n            <table className=\"table table-bordered\">\n                <tbody> \n                    {this.getRowsData()}\n                </tbody>\n            </table>\n            </div>\n            );\n    }\n    \n}","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n          mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n   \n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      \n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n\n    let ret = \"\";\n    let url = \"\";\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment/?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.post(url);\n    ret.then((response)=>{\n\n      console.log(response.data)\n      let listOfResults = response.data.result.keywords[0].sentiment;  \n      console.log(listOfResults)\n      this.setState({sentimentOutput:<EmotionTable data={listOfResults}/>});\n    })\n    .catch(err => {\n      console.log('error:', err);\n    }); \n  }\n    sendForEmotionAnalysis = () => {\n\n      let req = \"\";\n      let url = \"\";\n      if(this.state.mode === \"url\") {\n        url = url+\"/url/emotion/?url=\"+document.getElementById(\"textinput\").value;\n      } else {\n        url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\n        console.log(url)\n      }\n      // response from the request to the local server\n      req = axios.post(url);\n        req.then((response)=>{\n        console.log(response.data)\n        let listOfResults = response.data.result.keywords[0].emotion;\n        this.setState({sentimentOutput:<EmotionTable data={listOfResults}/>});   \n      })\n      .catch(err => {\n        console.log('error:',err);\n      }); \n        \n    };\n\n// load page\n  render() {\n    return (  \n      <div className=\"App\">\n        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}